
#include <sqlca.h>
#include "ctl_db.h"
#include "ctl_monitor.h"

EXEC SQL INCLUDE sqlca;
#define ESQL_PRINT_ERR() fprintf(stderr, "%ld %s\n",sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc);
EXEC SQL BEGIN DECLARE SECTION;
   unsigned  char g_sqlstr[10000];
EXEC SQL END DECLARE SECTION;

/**********************************
*func name:main
*function:
*parameters:
*call:
*called:
*return:
*/
int conn_db(const char *host, const int port, const char *database,
		        const char *user, const char *password)
{
	EXEC SQL BEGIN DECLARE SECTION;
		char db_target[64];
		char db_user[32];
		char db_password[64];
	EXEC SQL END DECLARE SECTION;

	if(!strcmp(host,"127.0.0.1") || !strcmp(host, "localhost"))
		snprintf(db_target, 64, "unix:postgresql://%s:%d/%s",host, port, database);
	else
		snprintf(db_target, 64, "tcp:postgresql://%s:%d/%s",host, port, database);
    
	snprintf(db_user, 32,"%s",user);
	snprintf(db_password, 64, "%s", password);
	
	EXEC SQL CONNECT TO :db_target USER :db_user USING :db_password;
	if(sqlca.sqlcode < 0) 
	{
//		fprintf(stderr, "%ld %s\n",sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc);
		return ESQL_ERR;
	}
	
	EXEC SQL SET CLIENT_ENCODING TO 'GBK';
	return ESQL_OK;
}

int conn_local_db()
{
	EXEC SQL BEGIN DECLARE SECTION;
		char db_target[64];
		char db_user[32];
	EXEC SQL END DECLARE SECTION;
	
	snprintf(db_target, 64, "unix:postgresql://%s:%d/%s","127.0.0.1", 5432, "eAudit");
	snprintf(db_user, 32, "%s","postgres");
	
	EXEC SQL CONNECT TO :db_target  USER :db_user;
	if(sqlca.sqlcode < 0)
	{
//		fprintf(stderr, "%ld %s\n",sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc);
		return ESQL_ERR;
	}
	EXEC SQL SET CLIENT_ENCODING TO 'GBK';
	return ESQL_OK;
}




/**********************************
*func name:main
*function:
*parameters:
*call:
*called:
*return:
*/
int close_db(void)
{
    EXEC SQL DISCONNECT;
    if(sqlca.sqlcode < 0) 
    {
        ESQL_PRINT_ERR();   
        return ESQL_ERR;
    }
    return ESQL_OK;
}

int write_process_log_into_db(unsigned char* str)
{    
	return ESQL_OK;
	char log_date[64];
	char cur_date[64];
	int ret=ESQL_OK;
	memset(log_date,0x00,64);
    	memset(g_sqlstr,0x00,10000);
	get_now_time((char *)log_date);
	get_current_date((char*)cur_date);
	sprintf((unsigned char *)g_sqlstr,"INSERT INTO \"public\".ea_log_system_%s (p_type_id,logdate_time,sys_name,operate_type,model_name,log_details) values(%d,'%s','%s','%s','%s','%s')",\
		(char *)cur_date,23,(char *)log_date,"SNAM","SNAM系统状态","eAudit",(unsigned char *)str);

 	 //fprintf(stdout, "\t%s %d %s\n", __FILE__, __LINE__, g_sqlstr);
        EXEC SQL EXECUTE IMMEDIATE :g_sqlstr;
	//printf(" session sqlca.sqlcode=%ld\n",sqlca.sqlcode);
       if (sqlca.sqlcode < 0)
        {
            ret = ESQL_ERR;
	    EXEC SQL ROLLBACK;
        }
        else
        {
            EXEC SQL COMMIT;
            if(sqlca.sqlcode < 0)
            {
                printf( "COMMIT sqlca.sqlcode=%ld\n",sqlca.sqlcode);
                ESQL_PRINT_ERR();
		EXEC SQL ROLLBACK;
                ret = ESQL_ERR;
            }
        }   
    return ret;
	
}	



int write_process_alarm_into_db(unsigned char* str)
{    
        return ESQL_OK;
	char alarm_date[64];
	char cur_date[64];
	int ret=ESQL_OK;
	char ip_eth0[20],mac_eth0[20];
	memset(ip_eth0,0x00,20);
	memset(mac_eth0,0x00,20);
	memset(alarm_date,0x00,64);
    	memset(g_sqlstr,0x00,10000);
	get_now_time((char *)alarm_date);
        get_current_date((char*)cur_date);
	get_eth0_info(ip_eth0,mac_eth0);
	sprintf((unsigned char *)g_sqlstr,"INSERT INTO \"public\".ea_alarm_system_%s(session_id,p_type_id,pro_id,pro_name,model_name,sys_name,src_ip,src_mac,dst_ip,dst_mac,usr_id,src_usrname,warn_type,warn_state,alarm_date,warn_level,description)\
		values (%d,%d,%d,'%s','%s','%s','%s','%s','%s','%s',%d,'%s',%ld,'%s','%s',%ld,'%s')", \
		(char*)cur_date,0,23,0,"eAudit","eAudit","SNAM",ip_eth0,mac_eth0,ip_eth0,mac_eth0,0,"N/A",0,"一般",(char *)alarm_date,100,(unsigned char *)str);

 //	  fprintf(stdout, "\t%s %d %s\n", __FILE__, __LINE__, g_sqlstr);
        EXEC SQL EXECUTE IMMEDIATE :g_sqlstr;
	//printf(" session sqlca.sqlcode=%ld\n",sqlca.sqlcode);
       if (sqlca.sqlcode < 0)
        {
 //       	 printf( "EXECUTE sqlca.sqlcode=%ld\n",sqlca.sqlcode);
            ret = ESQL_ERR;
	    EXEC SQL ROLLBACK;
        }
        else
        {
            EXEC SQL COMMIT;
            if(sqlca.sqlcode < 0)
            {
                printf( "COMMIT sqlca.sqlcode=%ld\n",sqlca.sqlcode);
		EXEC SQL ROLLBACK;
                ESQL_PRINT_ERR();
                ret = ESQL_ERR;
            }
        }   
    return ret;
	
}	


int write_snam_sysinfo_into_db(unsigned char* str)
{    
	char log_date[64];
	int ret=ESQL_OK;
	return ESQL_OK;
	memset(log_date,0x00,64);
    	memset(g_sqlstr,0x00,10000);
	get_now_time((char *)log_date);
	sprintf((unsigned char *)g_sqlstr,"INSERT INTO crew_operatelog (logdatetime,loginname,operatetype,logdetails) values('%s','%s','%s','%s')",\
		(char *)log_date,"admin","SNAM系统信息",(unsigned char *)str);

 //	  fprintf(stdout, "\t%s %d %s\n", __FILE__, __LINE__, g_sqlstr);
        EXEC SQL EXECUTE IMMEDIATE :g_sqlstr;
//	printf(" session sqlca.sqlcode=%ld\n",sqlca.sqlcode);
       if (sqlca.sqlcode < 0)
        {
            ret = ESQL_ERR;
        }
        else
        {
            EXEC SQL COMMIT;
            if(sqlca.sqlcode < 0)
            {
                printf( "COMMIT sqlca.sqlcode=%ld\n",sqlca.sqlcode);
                ESQL_PRINT_ERR();
                ret = ESQL_ERR;
            }
        }   
    return ret;
	
}
	
int write_authorizeinfo_into_db(char* str,int pro_num)
{    
        SUPPORT_PRO_NODE_ID pro_items_id = (SUPPORT_PRO_NODE_ID)str;
	int ret=ESQL_OK;
	return ESQL_OK;
        int i;
	return ret; 
    	memset(g_sqlstr,0x00,10000);

        strcpy((unsigned char *)g_sqlstr,"DELETE  FROM \"eAPUBLIC\".protocoltypeinfo");
	//fprintf(stdout, "\t%s %d %s\n", __FILE__, __LINE__, g_sqlstr);
        EXEC SQL EXECUTE IMMEDIATE :g_sqlstr;
	//printf(" session sqlca.sqlcode=%ld\n",sqlca.sqlcode);
       	if (sqlca.sqlcode < 0)
        {
            ret = ESQL_ERR;
        }
        else
        {
            EXEC SQL COMMIT;
            if(sqlca.sqlcode < 0)
            {
                printf( "COMMIT sqlca.sqlcode=%ld\n",sqlca.sqlcode);
                ESQL_PRINT_ERR();
                ret = ESQL_ERR;
            }
        }   
    
        for(i=0;i<pro_num;i++){
        	memset(g_sqlstr,0x00,10000);
		sprintf((unsigned char *)g_sqlstr,"INSERT INTO \"eAPUBLIC\".protocoltypeinfo (protocoltypeid,protocolname,remark,default_etype,default_etype_id,default_ttype_id,\
		default_ttype,default_port,default_deal) values('%d','%s','%s','%s','%ld','%ld','%s','%d','%d')",\
		pro_items_id[i].pro_no,(char *)(pro_items_id[i].pro_name),(char *)(pro_items_id[i].pro_name),"TCP",1,1,"IP",100,100);

        	//fprintf(stdout, "\t%s %d %s\n", __FILE__, __LINE__, g_sqlstr);
        	EXEC SQL EXECUTE IMMEDIATE :g_sqlstr;
		//printf(" session sqlca.sqlcode=%ld\n",sqlca.sqlcode);
       		if (sqlca.sqlcode < 0)
        	{
            		ret = ESQL_ERR;
        	}
        	else
        	{
            		EXEC SQL COMMIT;
            		if(sqlca.sqlcode < 0)
            		{
                		printf( "COMMIT sqlca.sqlcode=%ld\n",sqlca.sqlcode);
                		ESQL_PRINT_ERR();
                		ret = ESQL_ERR;
            		}
        	}  
     } 
    return ret;
}

